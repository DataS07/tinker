#users object
m <- mongo('users', url = "mongodb://localhost:27017/prophet")
#tool object
t<- mongo('toolevents',url="mongodb://localhost:27017/prophet")
countSignUps<-c('[{ "$group":
{
"_id": {
"year": {
"$year": "$createdAt"
},
"month": {
"$month": "$createdAt"
},
"day": {
"$dayOfMonth": "$createdAt"
}
},
"count": {
"$sum": 1
}
}
},{
"$sort": {
"_id": 1
}
}]')
#count active signups
activeUsers<-c('[{
"$lookup": {
"from": "tools",
"localField": "tool",
"foreignField": "_id",
"as": "tool_docs"
}
}, {
"$unwind": "$tool_docs"
}, {
"$match": {
"tool_docs.owner": {
"$exists": true
}
}
}, {
"$group": {
"_id": {
"year": {
"$year": "$eventdate"
},
"month": {
"$month": "$eventdate"
},
"day": {
"$dayOfMonth": "$eventdate"
},
"user": "$tool_docs.owner"
},
"count": {
"$sum": 1
}
}
}, {
"$group": {
"_id": {
"year": "$_id.year",
"month": "$_id.month",
"day": "$_id.day"
},
"count": {
"$sum": 1
}
}
}, {
"$sort": {
"_id": 1
}
}]')
currentBeta<-as.data.frame(m$find('{}'))
plot(currentBeta$createdAt,rownames(currentBeta))
#update an entry
#m$update('{"local.username":"pedroglrz"}', '{"$set":{"email": "pedrog@mammothbiosci.com"}}')
#number of users
temp<-as.data.frame(m$aggregate(countSignUps,  options = '{"allowDiskUse":true}'))
#temp<-as.data.frame(m$find())
#m$aggregate(countSignUps,  options = '{"allowDiskUse":true}')
sum(temp$count)
load('~/Downloads/rstudio-export(2)/honey.RData')
ip_table <- as.data.frame(table(honeypot.data$source_ip))
library(tidyverse)
ip_table < ip_table %>% arrange(Freq)
colnames(ip_table)
ip_table <- ip_table %>% arrange(Freq)
View(ip_table)
ip_table <- ip_table %>% arrange(desc(Freq))
View(ip_table)
china_ip honeypot.data %>% filter(source_ip == "122.194.229.7")
china_ip <- honeypot.data %>% filter(source_ip == "122.194.229.7")
View(china_ip)
#convert to R dates and save as character string
honeypot.data$timestampProper<-as.POSIXct(as.numeric(as.character(honeypot.data$timestamp)),origin='1970-01-01')
honeypot.data$timestampChar<-as.character(honeypot.data$timestampProper)
#extact hours from the string and save as
honeypot.data$hour<-as.numeric(substr(honeypot.data$timestampChar,12,13))
honeypot.data$hourScaled<-scale(honeypot.data$hour)
china_ip <- honeypot.data %>% filter(source_ip == "122.194.229.7")
View(honeypot.data)
china_ip <- honeypot.data %>% filter(source_ip == "122.194.229.7")
load('~/Downloads/rstudio-export(2)/honey.RData')
library(tidyverse)
#convert to R dates and save as character string
honeypot.data$timestampProper<-as.POSIXct(as.numeric(as.character(honeypot.data$timestamp)),origin='1970-01-01')
honeypot.data$timestampChar<-as.character(honeypot.data$timestampProper)
#extact hours from the string and save as
honeypot.data$hour<-as.numeric(substr(honeypot.data$timestampChar,12,13))
#honeypot.data$hourScaled<-scale(honeypot.data$hour)
ip_table <- as.data.frame(table(honeypot.data$source_ip))
ip_table <- ip_table %>% arrange(desc(Freq))
china_ip <- honeypot.data %>% filter(source_ip == "122.194.229.7")
library(plotly)
install.packages("plotly")
class(china_ip$timestampProper)
china_ip <- honeypot.data %>% filter(source_ip == "122.194.229.7") %>%
arrange(desc(timestampProper))
china_ip <- honeypot.data %>% filter(source_ip == "122.194.229.7") %>%
arrange(desc(timestampProper)) %>%
mutate(timediff = c(diff(timestampProper),0))
?diff
china_ip <- honeypot.data %>% filter(source_ip == "122.194.229.7") %>%
arrange((timestampProper)) %>%
mutate(timediff = c(diff(timestampProper),0))
shiny::runApp('Documents/shiny-apps/analytics/UpAllNight')
install.packages(c("pagedown", "xaringan"))
pagedown::chrome_print("~/Downloads/thesis_slides/thesis_slides.html")
pagedown::chrome_print("~/Downloads/thesis_slides/thesis_slides.html",
timeout = 300)
install.packages(c("assertthat", "backports", "BH", "broom", "callr", "caTools", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "devtools", "digest", "dplyr", "fansi", "forcats", "foreign", "ggplot2", "git2r", "glue", "gtable", "haven", "highr", "httpuv", "httr", "hunspell", "jsonlite", "lattice", "lazyeval", "markdown", "MASS", "Matrix", "mgcv", "mime", "modelr", "mongolite", "nlme", "openssl", "pillar", "pkgbuild", "pkgload", "plotly", "processx", "ps", "purrr", "R6", "Rcpp", "readr", "readxl", "reprex", "rlang", "roxygen2", "rpart", "rstudioapi", "rversions", "rvest", "shiny", "stringi", "stringr", "survival", "tibble", "tidyr", "tidyselect", "xtable"))
library(mongolite)
library(dplyr)
#users object
m <- mongo('users', url = "mongodb://localhost:27017/prophet")
#tool object
t<- mongo('toolevents',url="mongodb://localhost:27017/prophet")
countSignUps<-c('[{ "$group":
{
"_id": {
"year": {
"$year": "$createdAt"
},
"month": {
"$month": "$createdAt"
},
"day": {
"$dayOfMonth": "$createdAt"
}
},
"count": {
"$sum": 1
}
}
},{
"$sort": {
"_id": 1
}
}]')
#count active signups
activeUsers<-c('[{
"$lookup": {
"from": "tools",
"localField": "tool",
"foreignField": "_id",
"as": "tool_docs"
}
}, {
"$unwind": "$tool_docs"
}, {
"$match": {
"tool_docs.owner": {
"$exists": true
}
}
}, {
"$group": {
"_id": {
"year": {
"$year": "$eventdate"
},
"month": {
"$month": "$eventdate"
},
"day": {
"$dayOfMonth": "$eventdate"
},
"user": "$tool_docs.owner"
},
"count": {
"$sum": 1
}
}
}, {
"$group": {
"_id": {
"year": "$_id.year",
"month": "$_id.month",
"day": "$_id.day"
},
"count": {
"$sum": 1
}
}
}, {
"$sort": {
"_id": 1
}
}]')
currentBeta<-as.data.frame(m$find('{}'))
View(currentBeta)
temp <- currentBeta[currentBeta$userLevel==9]
temp <- currentBeta[currentBeta$userLevel==9,]
View(temp)
#update an entry
m$update('{"local.username":"isaacfab"}', '{"$set":{"userLevel": "9"}}')
currentBeta<-as.data.frame(m$find('{}'))
View(currentBeta)
x = 5
x
x = 5
temp <- read.csv('~/Dropbox/ml_software_eng_assignment/data/student-mat.csv')
temp <- read.csv('~/Dropbox/ml_software_eng_assignment/data/student-mat.csv', sep = ';')
hist(temp$G3)
table(temp$G3)
dim(available.packages(contrib.url(getOption("repos"))))
dim(available.packages(contrib.url(getOption("repos")),filters = list()))
dim(available.packages(contrib.url(getOption("repos")),filters = list()))
install.packages(c("backports", "BH", "blob", "bookdown", "boot", "broom", "callr", "caTools", "chron", "cli", "clipr", "cluster", "curl", "data.table", "DBI", "dbplyr", "dendextend", "devtools", "digest", "dplyr", "ellipsis", "evaluate", "fields", "foreign", "fpc", "fs", "ggplot2", "git2r", "googleVis", "haven", "hexbin", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "kernlab", "KernSmooth", "knitr", "later", "leaflet", "lpSolve", "maptools", "markdown", "Matrix", "mclust", "mgcv", "mime", "modelr", "mongolite", "mvtnorm", "nlme", "openssl", "pagedown", "pillar", "pkgbuild", "pkgconfig", "plotly", "plyr", "prabclus", "processx", "progress", "promises", "purrr", "R6", "raster", "rcmdcheck", "Rcpp", "remotes", "reprex", "RJSONIO", "rlang", "rmarkdown", "robustbase", "roxygen2", "RSQLite", "rversions", "rvest", "scales", "selectr", "servr", "shiny", "sp", "spam", "survival", "sys", "tibble", "tidyr", "tidyverse", "tinytex", "usethis", "whisker", "xaringan", "xfun", "xml2", "zoo"))
getwd()
setwd("~/Dropbox/tinker/strange_attractors/")
install.packages("animation")
source('strange_attractor_functions.R')
n <- 10
#parameter inits
a <- -1.25
b <- -1.25
c <- -1.82
d <- -1.91
x_n <- 0
y_n <- 0
#data frame inits
clifford_data <- data.frame()
for(i in 1:n){
temp <- clifford_attractor(a,b,c,d,x_n,y_n)
x_n <- temp[1]
y_n <- temp[2]
print(temp)
}
source('strange_attractor_functions.R')
######### populate data frame with attractor values ##################
#number of iterations
n <- 10
#parameter inits
a <- -1.25
b <- -1.25
c <- -1.82
d <- -1.91
x_n <- 0
y_n <- 0
#data frame inits
clifford_data <- data.frame()
for(i in 1:n){
temp <- clifford_attractor(a,b,c,d,x_n,y_n)
x_n <- temp[1]
y_n <- temp[2]
print(temp)
}
#data frame inits
clifford_data <- data.frame(x = rep(0,n),
y = rep(0,n))
######### populate data frame with attractor values ##################
#number of iterations
n <- 10
#parameter inits
a <- -1.25
b <- -1.25
c <- -1.82
d <- -1.91
x_n <- 0
y_n <- 0
#data frame inits
clifford_data <- data.frame(x = rep(0,n),
y = rep(0,n))
for(i in 1:n){
temp <- clifford_attractor(a,b,c,d,x_n,y_n)
x_n <- temp[1]
y_n <- temp[2]
clifford_data[i,1] <- temp[1]
clifford_data[i,1] <- temp[2]
}
View(clifford_data)
#data frame inits
clifford_data <- data.frame(x = rep(0,n),
y = rep(0,n))
for(i in 1:n){
temp <- clifford_attractor(a,b,c,d,x_n,y_n)
x_n <- temp[1]
y_n <- temp[2]
clifford_data[i,1] <- temp[1]
clifford_data[i,2] <- temp[2]
}
View(clifford_data)
n <- 100000
#parameter inits
a <- -1.25
b <- -1.25
c <- -1.82
d <- -1.91
x_n <- 0
y_n <- 0
#data frame inits
clifford_data <- data.frame(x = rep(0,n),
y = rep(0,n))
for(i in 1:n){
temp <- clifford_attractor(a,b,c,d,x_n,y_n)
x_n <- temp[1]
y_n <- temp[2]
clifford_data[i,1] <- temp[1]
clifford_data[i,2] <- temp[2]
}
ggplot(clifford_data, aes(x = x, y = y)) +
geom_point(shape = 46, alpha = .01) +
coord_equal() +
theme_void()
library(tidyverse)
ggplot(clifford_data, aes(x = x, y = y)) +
geom_point(shape = 46, alpha = .01) +
coord_equal() +
theme_void()
ggplot(clifford_data, aes(x = x, y = y)) +
geom_point(shape = 46, alpha = .1) +
coord_equal() +
theme_void()
ggplot(clifford_data, aes(x = x, y = y)) +
geom_point(shape = 46) +
coord_equal() +
theme_void()
max(clifford_data$x)
max(clifford_data$y)
min(clifford_data$y)
min(clifford_data$x)
ggplot(clifford_data, aes(x = x, y = y)) +
geom_point() +
coord_equal() +
theme_void()
ggplot(clifford_data, aes(x = x, y = y)) +
geom_line() +
coord_equal() +
theme_void()
ggplot(clifford_data, aes(x = x, y = y)) +
geom_point(alpha=0.1) +
coord_equal() +
theme_void()
ggplot(clifford_data[1:1000,], aes(x = x, y = y)) +
geom_point(alpha=0.1) +
coord_equal() +
theme_void()
ggplot(clifford_data[1:1000,], aes(x = x, y = y)) +
geom_line(alpha=0.1) +
coord_equal() +
theme_void()
ggplot(clifford_data[1:1000,], aes(x = x, y = y)) +
geom_path(alpha=0.1) +
coord_equal() +
theme_void()
ggplot(clifford_data[1:1000,], aes(x = x, y = y)) +
geom_path(linejoin = "round",alpha=0.1) +
coord_equal() +
theme_void()
n <- 10000000
#parameter inits
a <- -1.25
b <- -1.25
c <- -1.82
d <- -1.91
x_n <- 0
y_n <- 0
# data frame inits
clifford_data <- data.frame(x = rep(0,n),
y = rep(0,n))
# with a large n this will take quite a while
for(i in 1:n){
temp <- clifford_attractor(a,b,c,d,x_n,y_n)
x_n <- temp[1]
y_n <- temp[2]
clifford_data[i,1] <- temp[1]
clifford_data[i,2] <- temp[2]
}
i
?progress
n <- 100000
#parameter inits
a <- -1.25
b <- -1.25
c <- -1.82
d <- -1.91
x_n <- 0
y_n <- 0
# data frame inits
clifford_data <- data.frame(x = rep(0,n),
y = rep(0,n))
# with a large n this will take quite a while
pb <- progress_bar$new(total = n)
for(i in 1:n){
temp <- clifford_attractor(a,b,c,d,x_n,y_n)
x_n <- temp[1]
y_n <- temp[2]
clifford_data[i,1] <- temp[1]
clifford_data[i,2] <- temp[2]
pb$tick()
}
library(progress) #for long running examples
pb <- progress_bar$new(total = n)
for(i in 1:n){
temp <- clifford_attractor(a,b,c,d,x_n,y_n)
x_n <- temp[1]
y_n <- temp[2]
clifford_data[i,1] <- temp[1]
clifford_data[i,2] <- temp[2]
pb$tick()
}
n <- 1000000
#parameter inits
a <- -1.25
b <- -1.25
c <- -1.82
d <- -1.91
x_n <- 0
y_n <- 0
# data frame inits
clifford_data <- data.frame(x = rep(0,n),
y = rep(0,n))
# with a large n this will take quite a while
pb <- progress_bar$new(total = n)
for(i in 1:n){
temp <- clifford_attractor(a,b,c,d,x_n,y_n)
x_n <- temp[1]
y_n <- temp[2]
clifford_data[i,1] <- temp[1]
clifford_data[i,2] <- temp[2]
pb$tick()
}
ggplot(clifford_data, aes(x = x, y = y)) +
geom_point(shape=46,alpha=0.1) +
coord_equal() +
theme_void()
ggplot(clifford_data, aes(x = x, y = y)) +
geom_point(shape=46,alpha=0.1) +
coord_equal() +
theme_void() -> plot
ggsave("strange1.png", plot, height = 5, width = 5, units = 'in')
ggplot(clifford_data, aes(x = x, y = y)) +
geom_point(shape=46,alpha=0.01) +
coord_equal() +
theme_void()
library(animation)
?ani.options
ani.options(interval = 0.05,
nmax = 300,
ani.width = 480,
ani.height = 480)
saveVideo({
num_iters <- 10
for(i in 1:num_iters){
clifford_data_subset <- clifford_data[1:(100000*i),]
#write the plot with a subset
p<-ggplot(clifford_data, aes(x = x, y = y)) +
geom_point(shape=46,alpha=0.01) +
coord_equal() +
theme_void()
print(p)
}#close the for loop
}, video.name = "clifford_1.mp4", other.opts = "-pix_fmt yuv420p -b 300k")
ggplot(clifford_data[100], aes(x = x, y = y)) +
geom_point(shape=1,alpha=0.01) +
coord_equal() +
theme_void()
ggplot(clifford_data[100,], aes(x = x, y = y)) +
geom_point(shape=1,alpha=0.01) +
coord_equal() +
theme_void()
ggplot(clifford_data[100,], aes(x = x, y = y)) +
geom_point(shape=1,alpha=1) +
coord_equal() +
theme_void() -> plot
ggplot(clifford_data[100,], aes(x = x, y = y)) +
geom_point(alpha=1) +
coord_equal() +
theme_void() -> plot
ggplot(clifford_data[100,], aes(x = x, y = y)) +
geom_point() +
coord_equal() +
theme_void()
ggplot(clifford_data[1000,], aes(x = x, y = y)) +
geom_point() +
coord_equal() +
theme_void()
ggplot(clifford_data[10000,], aes(x = x, y = y)) +
geom_point() +
coord_equal() +
theme_void()
ggplot(clifford_data[1:100,], aes(x = x, y = y)) +
geom_point() +
coord_equal() +
theme_void()
save(clifford_data, file ="~/clifford_1.RData")
save(clifford_data, file ="clifford_1.RData")
